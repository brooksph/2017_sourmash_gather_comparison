'''
Author: Phillip Brooks
Affiliation: UC Davis Lab for Data Intensive Biology
Aim: A simple Snakemake workflow to process reads to produce quality trimmed data
Date: Sun Jan 28 2018
Run: snakemake --use-conda --use-singularity
Latest modification:
'''
##--------------------------------------------------------------------------------------##
## Variables declaration
## Declaring some variables
## (SAMPLES, )
##--------------------------------------------------------------------------------------##

SAMPLES = ['mock.genome.fa']

rule all:
    input:
        expand('outputs/classification/sourmash/{sample}.scaled10k.k51.gather.matches.csv',
               sample=SAMPLES,
               ),
       
#rule ncbi_genome_download:
#    input:
#    output:
#        mock = 'inputs/data/mock.genome.fa',
#        fa = 'refseq/bacteria/GCF_000686225.1/GCF_000686225.1_Assembly_1_genomic.fna.gz'
#    singularity:
#        'docker://quay.io/biocontainers/ncbi-genome-download:0.2.5--py36_1'
#    shell:
#        '''
#        ncbi-genome-download --format fasta --taxid 1365653 bacteria
#        for i in {1..5} 
#        do 
#        gunzip -c refseq/bacteria/GCF_000686225.1/GCF_000686225.1_Assembly_1_genomic.fna.gz | tee "test${i}.fa" 
#        done
#        cat test1.fa test2.fa test3.fa test4.fa test5.fa > mock.genome.fa
#        mv {output.mock} inputs/data/
#       '''
# To use os.path.join,
# which is more robust than manually writing the separator.
import os

# Association between output files and source links
links = {
        'refseq-k51.sbt.json' : 'https://s3-us-west-1.amazonaws.com/spacegraphcats.ucdavis.edu/microbe-refseq-sbt-k51-2017.05.09.tar.gz',
        'genbank-k51.sbt.json' : 'https://s3-us-west-1.amazonaws.com/spacegraphcats.ucdavis.edu/microbe-genbank-sbt-k51-2017.05.09.tar.gz'}

# Make this association accessible via a function of wildcards
def chainfile2link(wildcards):
    return links[wildcards.chainfile]

rule download:
    input:
    output:
        # We inform snakemake what this rule will generate
        os.path.join('inputs/databases/', '{chainfile}')
    message:
        '--- Downloading Data.'
    params:
        # using a function of wildcards in params
        link = chainfile2link,
    shell:
        '''
        mkdir -p inputs/databases/
        wget {params.link}
        tar xf microbe-refseq-sbt-k51-2017.05.09.tar.gz -C inputs/databases
        tar xf microbe-genbank-sbt-k51-2017.05.09.tar.gz -C inputs/databases
       '''

rule calculate_signatures:
    input:
        'inputs/data/{sample}',
    output:
        'output/classification/signatures/{sample}.sig',
    message:
        '--- Compute sourmash signatures with quality trimmed data with sourmash'
    singularity:
        'docker://brooksph/sourmash_ctr:latest'
    log:
        'outputs/classification/sourmash/{sample}_compute.log'
    benchmark:
        'benchmarks/{sample}.compute.benchmark.txt'
    shell:
       '''
       sourmash compute --track-abundance --scaled 10000 -k 51 {input} -o {output}
       '''

rule classify_signatures:
    input:
        sig= 'output/classification/signatures/{sample}.sig',
        ref= 'inputs/databases/refseq-k51.sbt.json',
        gen= 'inputs/databases/genbank-k51.sbt.json'
    output:
        'outputs/classification/sourmash/{sample}.scaled10k.k51.gather.matches.csv'
    message:
        '--- Classify sourmash signatures with quality trimmed data with sourmash'
    singularity:
        'docker://brooksph/sourmash_ctr:latest'
    log:
        'outputs/classification/sourmash/{sample}_gather.log'
    benchmark:
        'benchmarks/{sample}.gather.benchmark.txt'
    shell:
        'sourmash gather -k 51 {input.sig} {input.ref} {input.gen} -o {output}'
